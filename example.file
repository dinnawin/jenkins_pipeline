----------checkout---------
stage('Checkout SCM') {
  steps {
    checkout([
      $class: 'GitSCM',
      branches: [[name: 'master']],
      userRemoteConfigs: [[
        url: 'git@github.com:wshihadeh/rabbitmq_client.git',
        credentialsId: '',
      ]]
     ])
   }
}
----------------------------
--------with function-------
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                script {
                    if (env.BRANCH_NAME == 'test') {
                        sshexec('hawksight_test')
                    }

                    if (env.BRANCH_NAME == 'staging') {
                        sshexec('hawksight_staging')
                    }

                    if (env.BRANCH_NAME == 'develop') {
                        sshexec('hawksight_develop')
                        sshexec('hawksight_preprod')
                    }
                }
            }
        }
    }
    post {
        always {
            discordSend 
                description: "Jenkins Pipeline Build", 
                link: env.BUILD_URL, result: currentBuild.currentResult, 
                title: JOB_NAME, webhookURL: env.hwk_srm_frontend
        }
    }
}

def sshexec(configName) {
    sshPublisher(
        publishers: [
            sshPublisherDesc(
                configName: configName,
                transfers: [
                    sshTransfer(
                        execCommand: "docker ps -q | xargs -r docker kill"
                    ),
                    sshTransfer(
                        execCommand: "docker images -f dangling=true -q | xargs -r -n1 docker rmi -f"
                    ),
                    sshTransfer(
                        execCommand: "cd /home/ubuntu/hwk-srm-frontend/ && docker-compose rm -f -v"
                    ),
                    sshTransfer(
                        execCommand: "cd /home/ubuntu/hwk-srm-frontend/ && git pull && docker-compose up --build -d"
                    )
                ]
            )
        ]
    )
}
------------------------------

------kubernetes agent--------
pipeline {
  agent {
    kubernetes {
      label 'promo-app'  // all your pods will be named with this prefix, followed by a unique id
      idleMinutes 5  // how long the pod will live after no jobs have run on it
      yamlFile 'build-pod.yaml'  // path to the pod definition relative to the root of our project 
      defaultContainer 'maven'  // define a default container if more than a few stages use it, will default to jnlp container
    }
  }
  stages {
    stage('Build') {
      steps {  // no container directive is needed as the maven container is the default
        sh "mvn clean install"   
      }
    }
    stage('Build Docker Image') {
      steps {
        container('docker') {  
          sh "docker build -t vividseats/promo-app:dev ."  // when we run docker in this step, we're running it via a shell on the docker build-pod container, 
          sh "docker push vividseats/promo-app:dev"        // which is just connecting to the host docker deaemon
        }
      }
    }
  }
}

---------------------------


